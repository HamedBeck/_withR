load("~/my-r/city_data.csv")
library(readr)
city_data <- read_csv("~/my-r/city_data.csv")
View(city_data)
df <- reader::read_csv("~/my-r/city_data.csv")
df <- readr::read_csv("~/my-r/city_data.csv")
View(df)
trip <- df %>%
colnames()
library(magrittr)
trip <- df %>%
colnames()
trip
trip %>% filter(!= "Row-name")
trip %>% filter("Row-name")
trip[trip != "Row-name"]
trip <- colnames(df)[colnames(df) != "Row-name"]
trip
trip <- c(trip, trip[1])
trip
sample(trip[2:length(trip)-1])
trip[2:length(trip)-1]
trip[c(2:length(trip)-1)]
trip
sample(c(2:length(trip)), length(trip)-2)
trip[sample(c(2:length(trip)), length(trip)-2)]
trip <- colnames(df)[colnames(df) != "Row-name"]
trip <- c(trip[1],trip[sample(c(2:length(trip)), length(trip)-2)], trip[1])
trip
df[trip[1], trip[2]]
rownames(df)
rownames(df) <- df["Row-name"]
row.names(df) <- df["Row-name"]
row.names(df) <- df["Row-name",1:]
df[["Row-name"]][2,]
df[["Row-name"]][2]
df[["Row-name"]][1]
row.names(df) <- df[["Row-name"]]
rownames(df) <- df[["Row-name"]]
row.names(df)
df[trip[1], trip[2]]
df[[trip[1]]][trip[2]]
df[[trip[1]]]
df[[trip[1]]][[trip[2]]]
df[[trip[1]]][trip[2]]
trip[2]
df$Barcelona["Berlin"]
df$Barcelona
df$Barcelona[2]
df[df$Barcelona=="Berlin"]
df[df$Barcelona=="Berlin", "Barcelona"]
df[df$Barcelona=="Berlin", "Barcelona"]
df[trip[1]]
df[trip[1], 3]
df[trip[1], trip[2]]
df[[trip[1],]]
df[trip[1],]
df[trip[1],"Belgrade"]
df[,trip[1]]
df[trip[1],][trip[2]]
df[trip[1],]
df[trip[1],][trip[1]]
df[trip[1],][trip[2]]
trip[2]
df[trip[1],][trip[2]]
df[trip[1],][trip[2]] + df[trip[1],][trip[3]]
range(1, 10 )
range(1, 10)
range(10)
seq.int(1,10)
object <- c()
for (i in seq.int(1 length(trip)-1) {
for (i in seq.int(1 length(trip)-1)) {
object <- append(object, df[trip[i],][trip[i+1]])
}
df[trip[1],][trip[2]]
df[trip[1]][trip[2]]
df[trip[1],][trip[2]]
for (i in seq.int(1 length(trip)-1)) {
object <- append(object, df[trip[i],][trip[i+1]])
}
for (i in seq.int(1 length(trip)-1)) {
object <- append(object, df[trip[i],][trip[i+1]])
}
for (i in seq.int(1 length(trip)-1)) {
#object <- append(object, df[trip[i],][trip[i+1]])
print(i)
}
object <- c()
for (i in seq.int(1 ,length(trip)-1)) {
object <- append(object, df[trip[i],][trip[i+1]])
}
object
sum(object)
df[trip[1],][trip[2]]
df[trip[1],][trip[2],]
df[trip[1],trip[2]]
df[trip[1],][trip[2]][trip[2]]
df[trip[1],]
df[,trip[1]][trip[2]]
df[,trip[1]][,trip[2]]
df[,trip[1]]
df[trip[1],][[trip[2]]]
object <- c()
for (i in seq.int(1 ,length(trip)-1)) {
object <- append(object, df[trip[i],][[trip[i+1]]])
}
sum(trip)
trip
df[trip[i],][[trip[i+1]]]
object <- c()
for (i in seq.int(1 ,length(trip)-1)) {
object <- append(object, df[trip[i],][[trip[i+1]]])
}
object
sum(object)
object <- c()
for (i in seq.int(1 ,length(trip))) {
object <- append(object, df[trip[i],][[trip[i+1]]])
}
trip
trip[-1]
trip[-1,]
end(trip)
dplyr::last(trip)
end(trip)[1]
trip[end(trip)[1]]
tail(trip,-2)
dplyr::nth(trip,-2)
dplyr::nth(trip,-2)
dplyr::nth(trip,-1)
dplyr::last(trip)
object <- append(object, df[dplyr::nth(trip,-2)][dplyr::last(trip)] )
object <- append(object, df[dplyr::nth(trip,-2),][dplyr::last(trip)] )
object
object <- c()
for (i in seq.int(1 ,length(trip)-1)) {
object <- append(object, df[trip[i],][[trip[i+1]]])
}
object <- append(object, df[dplyr::nth(trip,-2),][[dplyr::last(trip)]] )
sum(object)
readMyCsvData <- function(path ="~/my-r/city_data.csv"){
df <- readr::read_csv()
rownames(df) <- df[["Row-name"]]
}
configureTrip <- function(df){
trip <- colnames(df)[colnames(df) != "Row-name"]
trip <- c(trip[1],trip[sample(c(2:length(trip)), length(trip)-2)], trip[1])
}
calculateDistance <- function(trip, df){
distance <- c()
for (i in seq.int(1 ,length(trip)-1)) {
distance <- append(distance, df[trip[i],][[trip[i+1]]])
}
distance <- append(distance, df[dplyr::nth(trip,-2),][[dplyr::last(trip)]] )
return(list(distance=sum(distance), trip=trip))
}
df <- readMyCsvData()
readMyCsvData <- function(path ="~/my-r/city_data.csv"){
df <- readr::read_csv(path)
rownames(df) <- df[["Row-name"]]
}
df <- readMyCsvData()
readMyCsvData <- function(path ="~/my-r/city_data.csv"){
df <- readr::read_csv(path, show_col_types = FALSE)
rownames(df) <- df[["Row-name"]]
}
df <- readMyCsvData()
readMyCsvData <- function(path ="~/my-r/city_data.csv"){
df <- readr::read_csv(path, show_col_types = FALSE) %>%
data.frame()
rownames(df) <- df[["Row-name"]]
}
df <- readMyCsvData()
df
readMyCsvData <- function(path ="~/my-r/city_data.csv"){
df <- readr::read_csv(path, show_col_types = FALSE) %>%
data.frame()
rownames(df) <- df[["Row-name"]]
return(df)
}
df <- readMyCsvData()
df
rownames(df)
readMyCsvData <- function(path ="~/my-r/city_data.csv"){
df <- readr::read_csv(path, show_col_types = FALSE) %>%
as.data.frame()
rownames(df) <- df[["Row-name"]]
return(df)
}
df <- readMyCsvData()
rownames(df)
trip <- configureTrip(df)
trip
trip <- calculateDistance(trip, df)
trip$distance
calculateDistance <- function(trip, df){
distance <- c()
for (i in seq.int(1 ,length(trip)-1)) {
distance <- append(distance, df[trip[i],][[trip[i+1]]])
}
distance <- append(distance, df[dplyr::nth(trip,-2),][[dplyr::last(trip)]] )
return(list(distance=sum(distance)/1000, trip=trip))
}
trip <- configureTrip(df)
trip <- calculateDistance(trip, df)
trip$distance
generation <- lapply(seq.int(100), FUN = function(){
df %>%
configureTrip(.) %>%
calculateDistance(., df ))
configureTrip <- function(df){
trip <- colnames(df)[colnames(df) != "Row-name"]
trip <- c(trip[1],trip[sample(c(2:length(trip)), length(trip)-2)], trip[1])
return (trip)
}
generation <- lapply(seq.int(100), FUN = function(df){
df %>%
configureTrip(.) %>%
calculateDistance(., df ))
})
generation <- lapply(seq.int(100), FUN = function(df){
df %>%
configureTrip() %>%
calculateDistance(., df ))
})
generation <- lapply(seq.int(100), FUN = function(df){
df %>%
configureTrip() %>%
calculateDistance(., df )
})
generation <- lapply(seq.int(100), FUN = function(df){
df %>%
configureTrip() %>%
calculateDistance(., df )
})
source("~/my-r/optimize/R/configureTrip.R")
df <- readMyCsvData()
trip <- configureTrip(df)
calculateDistance(trip, df)
generation <- lapply(seq.int(100), FUN = function(df){
df %>%
configureTrip() %>%
calculateDistance(., df )
})
generation <- lapply(seq.int(100), FUN = function(df){
df %>% print(.)
# configureTrip() %>%
# calculateDistance(., df )
})
library(parallel)
no_cores <- detectCores()
clust <- makeCluster(no_cores)
parLapply(clust,1:10, function(x) assign(x, configureTrip(df) %>%
calculateDistance(.)))
library(magrittr)
parLapply(clust,1:10, function(x) assign(x, configureTrip(df) %>%
calculateDistance(.)))
2 %>% exp()
parLapply(clust,1:10, function(x) assign(x, configureTrip(df) %>%
calculateDistance(.)))
parLapply(clust,1:10, function(x) {assign(x, calculateDistance( configureTrip(df), df))})
lapply(seq.int(10), FUN =function(x) {assign(x, calculateDistance( configureTrip(df), df))})
lapply(seq.int(10), FUN =function(x) {assign(x, df %>%
configureTrip() %>%
calculateDistance(. , df))})
