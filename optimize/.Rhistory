trip[-1]
trip[-1,]
end(trip)
dplyr::last(trip)
end(trip)[1]
trip[end(trip)[1]]
tail(trip,-2)
dplyr::nth(trip,-2)
dplyr::nth(trip,-2)
dplyr::nth(trip,-1)
dplyr::last(trip)
object <- append(object, df[dplyr::nth(trip,-2)][dplyr::last(trip)] )
object <- append(object, df[dplyr::nth(trip,-2),][dplyr::last(trip)] )
object
object <- c()
for (i in seq.int(1 ,length(trip)-1)) {
object <- append(object, df[trip[i],][[trip[i+1]]])
}
object <- append(object, df[dplyr::nth(trip,-2),][[dplyr::last(trip)]] )
sum(object)
readMyCsvData <- function(path ="~/my-r/city_data.csv"){
df <- readr::read_csv()
rownames(df) <- df[["Row-name"]]
}
configureTrip <- function(df){
trip <- colnames(df)[colnames(df) != "Row-name"]
trip <- c(trip[1],trip[sample(c(2:length(trip)), length(trip)-2)], trip[1])
}
calculateDistance <- function(trip, df){
distance <- c()
for (i in seq.int(1 ,length(trip)-1)) {
distance <- append(distance, df[trip[i],][[trip[i+1]]])
}
distance <- append(distance, df[dplyr::nth(trip,-2),][[dplyr::last(trip)]] )
return(list(distance=sum(distance), trip=trip))
}
df <- readMyCsvData()
readMyCsvData <- function(path ="~/my-r/city_data.csv"){
df <- readr::read_csv(path)
rownames(df) <- df[["Row-name"]]
}
df <- readMyCsvData()
readMyCsvData <- function(path ="~/my-r/city_data.csv"){
df <- readr::read_csv(path, show_col_types = FALSE)
rownames(df) <- df[["Row-name"]]
}
df <- readMyCsvData()
readMyCsvData <- function(path ="~/my-r/city_data.csv"){
df <- readr::read_csv(path, show_col_types = FALSE) %>%
data.frame()
rownames(df) <- df[["Row-name"]]
}
df <- readMyCsvData()
df
readMyCsvData <- function(path ="~/my-r/city_data.csv"){
df <- readr::read_csv(path, show_col_types = FALSE) %>%
data.frame()
rownames(df) <- df[["Row-name"]]
return(df)
}
df <- readMyCsvData()
df
rownames(df)
readMyCsvData <- function(path ="~/my-r/city_data.csv"){
df <- readr::read_csv(path, show_col_types = FALSE) %>%
as.data.frame()
rownames(df) <- df[["Row-name"]]
return(df)
}
df <- readMyCsvData()
rownames(df)
trip <- configureTrip(df)
trip
trip <- calculateDistance(trip, df)
trip$distance
calculateDistance <- function(trip, df){
distance <- c()
for (i in seq.int(1 ,length(trip)-1)) {
distance <- append(distance, df[trip[i],][[trip[i+1]]])
}
distance <- append(distance, df[dplyr::nth(trip,-2),][[dplyr::last(trip)]] )
return(list(distance=sum(distance)/1000, trip=trip))
}
trip <- configureTrip(df)
trip <- calculateDistance(trip, df)
trip$distance
generation <- lapply(seq.int(100), FUN = function(){
df %>%
configureTrip(.) %>%
calculateDistance(., df ))
configureTrip <- function(df){
trip <- colnames(df)[colnames(df) != "Row-name"]
trip <- c(trip[1],trip[sample(c(2:length(trip)), length(trip)-2)], trip[1])
return (trip)
}
generation <- lapply(seq.int(100), FUN = function(df){
df %>%
configureTrip(.) %>%
calculateDistance(., df ))
})
generation <- lapply(seq.int(100), FUN = function(df){
df %>%
configureTrip() %>%
calculateDistance(., df ))
})
generation <- lapply(seq.int(100), FUN = function(df){
df %>%
configureTrip() %>%
calculateDistance(., df )
})
generation <- lapply(seq.int(100), FUN = function(df){
df %>%
configureTrip() %>%
calculateDistance(., df )
})
source("~/my-r/optimize/R/configureTrip.R")
df <- readMyCsvData()
trip <- configureTrip(df)
calculateDistance(trip, df)
generation <- lapply(seq.int(100), FUN = function(df){
df %>%
configureTrip() %>%
calculateDistance(., df )
})
generation <- lapply(seq.int(100), FUN = function(df){
df %>% print(.)
# configureTrip() %>%
# calculateDistance(., df )
})
library(parallel)
no_cores <- detectCores()
clust <- makeCluster(no_cores)
parLapply(clust,1:10, function(x) assign(x, configureTrip(df) %>%
calculateDistance(.)))
library(magrittr)
parLapply(clust,1:10, function(x) assign(x, configureTrip(df) %>%
calculateDistance(.)))
2 %>% exp()
parLapply(clust,1:10, function(x) assign(x, configureTrip(df) %>%
calculateDistance(.)))
parLapply(clust,1:10, function(x) {assign(x, calculateDistance( configureTrip(df), df))})
lapply(seq.int(10), FUN =function(x) {assign(x, calculateDistance( configureTrip(df), df))})
lapply(seq.int(10), FUN =function(x) {assign(x, df %>%
configureTrip() %>%
calculateDistance(. , df))})
df <- readMyCsvData()
source("~/_withR-master/optimize/R/configureTrip.R")
df <- readMyCsvData()
generation <- lapply(seq.int(nPopulation),
FUN =function(x) {
assign(toString(x),
df %>%
configureTrip() %>%
calculateDistance(. , df))}
)
nPopulation = 100
generation <- lapply(seq.int(nPopulation),
FUN =function(x) {
assign(toString(x),
df %>%
configureTrip() %>%
calculateDistance(. , df))}
)
generation <- generation %>%
naturalSelection(.)
naturalSelection <- function(population){
treshold <- population %>%
lapply(.,
function(x){
x$distance}
) %>%
unlist(.) %>%
mean()
population[purrr::map(.x=population,
.f= function(x){
x$distance <= treshold}
) %>%
unlist]
}
crossover <- function(trip){
x <-sample(2:(length(trip$trip)-1), 2, replace = FALSE)
temp <-trip$trip[x[1]]
trip$trip[x[1]] <- trip$trip[x[2]]
trip$trip[x[2]] <- temp
trip <- calculateDistance(trip$trip)
return(trip)
}
mutation <- function(trip){
mutated <- crossover(trip)
delta <- trip$distance - mutated$distance
if(delta > 0 | exp(-delta/runif(1, min = 0.5, max = 10)) > runif(1, min = 0, max = 1)){
return(mutated)
}
else
return(trip)
}
generation <- generation %>%
naturalSelection(.)
diffLength <- nPopulation - length(generation)
sample(seq(diffLength), 0.3*diffLength)
toCross <-sample(seq(diffLength), 0.3*diffLength)
lapply(toCross, function(x){generation[[x]] %>%
mutation()})
toCross
generation[[1]]
generation[[56]]
seq_along(generation)
toCross <-sample(seq_along(generation), 0.3*diffLength)
toCross
lapply(toCross, function(x){generation[[x]] %>%
mutation()})
lapply(toCross, function(x){generation[[x]] %>%
mutation()})->tst
tst[[1]]
generation[[1]]
generation <- append(generation, tst)
generation <- lapply(seq.int(nPopulation),
FUN =function(x) {
assign(toString(x),
df %>%
configureTrip() %>%
calculateDistance(. , df))}
)
generation <- generation %>%
naturalSelection(.)
diffLength <- nPopulation - length(generation)
toCross <-sample(seq_along(generation), 0.3*diffLength)
generation <- append(generation,
lapply(toCross, function(x){
generation[[x]] %>%
crossover()})
)
toMut <-sample(seq_along(generation), 0.25*diffLength)
generation <- append(generation,
lapply(toMut, function(x){
generation[[x]] %>%
mutation()})
)
?pmin
dist <- sapply(generation, "[[", "distance")
dist <- order(generation(order(sapply(generation, "[[", "distance"))))
dist <- order(sapply(generation, "[[", "distance"))
generation[[75]]$distance
generation[[31]]$distance
generation[[36]]$distance
generation[[68]]$distance
order(sapply(generation, "[[", "distance"))[1:5]
order(sapply(generation, "[[", "distance"))
generation[[order(sapply(generation, "[[", "distance"))[1:5]]]
order(sapply(generation, "[[", "distance"))[1:5]
order(sapply(generation, "[[", "distance"))[1:5] -> idx
generation[idx]
idx <- order(sapply(generation, "[[", "distance"))[1:0.1*diffLength]
generation <- append(generation, generation[idx])
generation <- lapply(seq.int(nPopulation),
FUN =function(x) {
assign(toString(x),
df %>%
configureTrip() %>%
calculateDistance(. , df))}
)
generation <- generation %>%
naturalSelection(.)
diffLength <- nPopulation - length(generation)
toCross <-sample(seq_along(generation), 0.3*diffLength)
generation <- append(generation,
lapply(toCross, function(x){
generation[[x]] %>%
crossover()})
)
toMut <-sample(seq_along(generation), 0.25*diffLength)
generation <- append(generation,
lapply(toMut, function(x){
generation[[x]] %>%
mutation()})
)
diffLength <- nPopulation - length(generation)
idx <- order(sapply(generation, "[[", "distance"))[1:0.5*diffLength]
generation <- append(generation, generation[idx])
idx <- order(sapply(generation, "[[", "distance"))[1:(0.5*diffLength)]
generation <- append(generation, generation[idx])
generation <- append(generation,
lapply(seq.int((diffLength*0.5)),
FUN =function(x) {
assign(toString(x),
df %>%
configureTrip() %>%
calculateDistance(. , df))}
)
)
sapply(generation mean(x$distance))
sapply(generation ,mean(x$distance))
sapply(generation ,function(x)mean(x$distance))
sapply(generation ,function(x)mean(x$distance))
geneticAlgorithm <- function(nPopulation,
...){
generation <- lapply(seq.int(nPopulation),
FUN =function(x) {
assign(toString(x),
df %>%
configureTrip() %>%
calculateDistance(. , df))}
)
generation <- generation %>%
naturalSelection(.)
diffLength <- nPopulation - length(generation)
toCross <-sample(seq_along(generation), 0.3*diffLength)
generation <- append(generation,
lapply(toCross, function(x){
generation[[x]] %>%
crossover()})
)
toMut <-sample(seq_along(generation), 0.25*diffLength)
generation <- append(generation,
lapply(toMut, function(x){
generation[[x]] %>%
mutation()})
)
diffLength <- nPopulation - length(generation)
idx <- order(sapply(generation, "[[", "distance"))[1:(0.5*diffLength)]
generation <- append(generation, generation[idx])
generation <- append(generation,
lapply(seq.int((diffLength*0.5)),
FUN =function(x) {
assign(toString(x),
df %>%
configureTrip() %>%
calculateDistance(. , df))}
)
)
}
tapply(seq.int(10), FUN = geneticAlgorithm(100))
apply(seq.int(10), FUN = geneticAlgorithm(100))
?rep
?replicate
lapply(seq.int(10), geneticAlgorithm(100))
lapply(seq.int(10), FUN=function(x){assign(x, geneticAlgorithm(100)))->tst
lapply(seq.int(10), FUN=function(x){assign(x, geneticAlgorithm(100))} )->tst
geneticAlgorithm <- function(nPopulation){
generation <- lapply(seq.int(nPopulation),
FUN =function(x) {
assign(toString(x),
df %>%
configureTrip() %>%
calculateDistance(. , df))}
)
generation <- generation %>%
naturalSelection(.)
diffLength <- nPopulation - length(generation)
toCross <-sample(seq_along(generation), 0.3*diffLength)
generation <- append(generation,
lapply(toCross, function(x){
generation[[x]] %>%
crossover()})
)
toMut <-sample(seq_along(generation), 0.25*diffLength)
generation <- append(generation,
lapply(toMut, function(x){
generation[[x]] %>%
mutation()})
)
diffLength <- nPopulation - length(generation)
idx <- order(sapply(generation, "[[", "distance"))[1:(0.5*diffLength)]
generation <- append(generation, generation[idx])
generation <- append(generation,
lapply(seq.int((diffLength*0.5)),
FUN =function(x) {
assign(toString(x),
df %>%
configureTrip() %>%
calculateDistance(. , df))}
)
)
}
lapply(seq.int(10), FUN=function(x){assign(x, geneticAlgorithm(100))} )->tst
tst <- geneticAlgorithm(100)
tst[[1]]
purrr::map(seq_len(10), ~geneticAlgorithm(100))->tst
tst[[10]][[1]]$distance
purrr::map(seq_len(10), ~geneticAlgorithm(100))[[10]]->tst
naturalSelection <- function(population, objectiveFunction ){
treshold <- population %>%
lapply(.,
function(x){
x$distance}
) %>%
unlist(.) %>%
objectiveFunction(.)
population[purrr::map(.x=population,
.f= function(x){
x$distance <= treshold}
) %>%
unlist]
}
generation <- lapply(seq.int(nPopulation),
FUN =function(x) {
assign(toString(x),
df %>%
configureTrip() %>%
calculateDistance(. , df))}
)
generation <- generation %>%
naturalSelection(., mean)
generation <- lapply(seq.int(nPopulation),
FUN =function(x) {
assign(toString(x),
df %>%
configureTrip() %>%
calculateDistance(. , df))}
)
generation <- generation %>%
naturalSelection(., mean)
generation <- generation %>%
naturalSelection(., min)
generationLoop(10, 50) -> tst
generationLoop <- function(nGeneration, nPopulation){
purrr::map(seq_len(nGeneration), ~ geneticAlgorithm(nPopulation))[[nGeneration]] %>%
naturalSelection(., min)
}
generationLoop(10, 50) -> tst
geneticAlgorithm <- function(nPopulation){
generation <- lapply(seq.int(nPopulation),
FUN =function(x) {
assign(toString(x),
df %>%
configureTrip() %>%
calculateDistance(. , df))}
)
generation <- generation %>%
naturalSelection(., mean)
diffLength <- nPopulation - length(generation)
toCross <-sample(seq_along(generation), 0.3*diffLength)
generation <- append(generation,
lapply(toCross, function(x){
generation[[x]] %>%
crossover()})
)
toMut <-sample(seq_along(generation), 0.25*diffLength)
generation <- append(generation,
lapply(toMut, function(x){
generation[[x]] %>%
mutation()})
)
diffLength <- nPopulation - length(generation)
idx <- order(sapply(generation, "[[", "distance"))[1:(0.5*diffLength)]
generation <- append(generation, generation[idx])
generation <- append(generation,
lapply(seq.int((diffLength*0.5)),
FUN =function(x) {
assign(toString(x),
df %>%
configureTrip() %>%
calculateDistance(. , df))}
)
)
}
generationLoop <- function(nGeneration, nPopulation){
purrr::map(seq_len(nGeneration), ~ geneticAlgorithm(nPopulation))[[nGeneration]] %>%
naturalSelection(., min)
}
generationLoop(10, 50) -> tst
tst[[1]]$distance
library(maps)
install.packages("maps")
library(maps)
data("world.cities")
world.cities %>% names()
world.cities %>% dplyr::filter(., name %in% tst[[1]]$trip)
world.cities %>% dplyr::filter(., name %in% tst[[1]]$trip) %>% dplyr::select(., country.etc)
world.cities %>% dplyr::filter(., name %in% tst[[1]]$trip &
country.etc %in% country)
country <- c(Spain, Serbia,Germany,Belgium,Hungary,
Denmark,Ireland,Germany,Turkey,Ukraine,
UK,Spain,Italy,Russia,Germany,France,
Czech Republic,Italy,Russia,Bulgaria,
Sweden,Austria,Poland)
country <- c("Spain", "Serbia", "Germany", "Belgium" ,"Hungary",
"Denmark","Ireland","Germany","Turkey","Ukraine",
"UK","Spain","Italy","Russia","Germany","France",
"Czech Republic","Italy","Bulgaria","Sweden",
"Austria","Poland")
world.cities %>% dplyr::filter(., name %in% tst[[1]]$trip &
country.etc %in% country)
tst[[1]]$trip
world.cities %>% dplyr::filter(., name %in% tst[[1]]$trip &
country.etc %in% country) %>%
order(tst[[1]]$trip)
world.cities %>% dplyr::filter(., name %in% tst[[1]]$trip &
country.etc %in% country) %>%
order(.,tst[[1]]$trip)
tst[[1]]$trip %>% class()
tst[[1]]$trip %>% data.frame()
tst[[1]]$trip %>% data.frame(names=.)
tst[[1]]$trip %>% data.frame(name=.)
tst[[1]]$trip %>%
data.frame(name=.) %>%
dplyr::left_join(.,
world.cities %>%
dplyr::filter(., name %in% tst[[1]]$trip & country.etc %in% country) %>%
dplyr::select(., c(lat, long, name)),
by=name)
tst[[1]]$trip %>%
data.frame(name=.) %>%
dplyr::left_join(.,
world.cities %>%
dplyr::filter(., name %in% tst[[1]]$trip & country.etc %in% country) %>%
dplyr::select(., c(lat, long, name)),
by="name")
library(leaflet)
install.packages("leaflet")
install.packages("leaflet", dependencies = TRUE)
library(leaflet)
